package net.opentsdb.kafka.consumer

import org.slf4j.LoggerFactory
import java.io.{FileInputStream, BufferedInputStream, File}
import java.util.Properties
import com.google.inject.Guice
import net.opentsdb.kafka.consumer.modules.ConsumerModule
import net.opentsdb.`client`.netty.modules.TsdbClientModule
import net.opentsdb.`client`.netty.TsdbClient
import net.opentsdb.utils.Config
import net.opentsdb.tools.ArgP
import net.opentsdb.tools.CliOptions



class Main {}

object Main {
  private final val logger = LoggerFactory.getLogger(classOf[Main])

  def main(args: Array[String]) {
    val props = loadProps(new File(args{0}))

    val injector = Guice.createInjector(new ConsumerModule(props))

    logger.info("Starting TSDB Consumer...")
    val consumer = injector.getInstance(classOf[TsdbConsumer])
    consumer.startAndWait()

    Runtime.getRuntime.addShutdownHook(new Thread() {
      override def run() {
        logger.info("Shutting down consumer")
        consumer.stopAndWait()
      }
    })
  }

  private def loadProps(config: File): Properties = {
    if(!config.canRead) {
      System.err.println("Cannot open config file: " + config)
      System.exit(1)
    }

    val props = new Properties()
    props.load(new BufferedInputStream(new FileInputStream(config)))

    logger.info("Loadded the file properties {}", props.toString)

    props
  }

  private def loadConfig(file : File): Config = {

    final ArgP argp = new ArgP()
    CliOptions.addCommon(argp)
    argp.addOption("--port", "NUM", "TCP port to listen on.")
    argp.addOption("--bind", "ADDR", "Address to bind to (default: 0.0.0.0).")
    argp.addOption("--staticroot", "PATH", "Web root from which to serve static files (/s URLs).")
    argp.addOption("--cachedir", "PATH", "Directory under which to cache result of requests.")
    argp.addOption("--worker-threads", "NUM", "Number for async io workers (default: cpu * 2).")
    argp.addOption("--async-io", "true|false", "Use async NIO (default true) or traditional blocking io")
    argp.addOption("--backlog", "NUM","Size of connection attempt queue (default: 3072 or kernel" + " somaxconn.")
    argp.addOption("--flush-interval", "MSEC", "Maximum time for which a new data point can be buffered" + " (default: " + DEFAULT_FLUSH_INTERVAL + ").")
    CliOptions.addAutoMetricFlag(argp);
    args = CliOptions.parse(argp, args);
    args = null;


    Config config = CliOptions.getConfig(argp);

    config

  }






}
